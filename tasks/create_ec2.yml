---
#
- name: "Create EC2 manager instances"
  ec2:
    key_name: "{{ ec2.ssh_key }}"
    instance_type: "{{ ec2.type }}"
    image: "{{ ec2.image }}"
    wait: yes
    wait_timeout: 500
    region: "{{ aws.region }}"
    group_id: "{{ sec_group_id }}"
    instance_tags:
      Role: "{{ ec2.tag_Role }}"
      Type: "manager"
      Name: "manager-0{{item}}{{ range(10,100)|list|random}}"
    count: 1
    vpc_subnet_id: "{{ subnet_ids[(item+(subnet_ids|length)) % (subnet_ids|length)] }}"
    assign_public_ip: yes
  register: ec2in_m
  async: 7200
  poll: 0
  loop: "{{ range(1,(ec2.count_manager|int-hostvars.localhost.found_managers.instances|length)+1)|list }}"
  when:
  - hostvars.localhost.found_managers.instances|length < ec2.count_manager|int

- name: "Create EC2 worker instances"
  ec2:
    key_name: "{{ ec2.ssh_key }}"
    instance_type: "{{ ec2.type }}"
    image: "{{ ec2.image }}"
    wait: yes
    wait_timeout: 500
    region: "{{ aws.region }}"
    group_id: "{{ sec_group_id }}"
    instance_tags:
      Role: "{{ ec2.tag_Role }}"
      Type: "worker"
      Name: "worker-0{{item}}{{ range(10,100)|list|random}}"
    vpc_subnet_id: "{{ subnet_ids[ (item+(subnet_ids|length)) % (subnet_ids|length)] }}"
    assign_public_ip: yes
  loop: "{{ range(1,(ec2.count_worker|int-hostvars.localhost.found_workers.instances|length)+1)|list }}"
  register: ec2in_w
  async: 7200
  poll: 0
  when:
  - hostvars.localhost.found_workers.instances|length < ec2.count_worker|int

- name: "Wait for managers creation to complete"
  async_status: jid={{ item.ansible_job_id }}
  register: ec2_jobs
  until: ec2_jobs.finished
  retries: 300
  with_items: "{{ec2in_m.results}}"

- name: "Wait for workers creation to complete"
  async_status: jid={{ item.ansible_job_id }}
  register: ec2_jobs
  until: ec2_jobs.finished
  retries: 300
  with_items: "{{ec2in_w.results}}"
